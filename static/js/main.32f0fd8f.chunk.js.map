{"version":3,"sources":["RetirementPlanCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["RetirementPlanCalculator","age","setAge","useState","retirementAge","setRetirementAge","desiredIncome","setDesiredIncome","extraExpense","setExtraExpense","currentInvestment","setCurrentInvestment","customRetirementAge","setCustomRetirementAge","customDesiredIncome","setCustomDesiredIncome","customExtraExpense","setCustomExtraExpense","customCurrentInvestment","setCustomCurrentInvestment","plans","setPlans","currentPlanIndex","setCurrentPlanIndex","showCustomOptions","setShowCustomOptions","error","setError","formatNumber","number","parsedNumber","parseFloat","isNaN","toFixed","replace","validateInputs","actualRetirementAge","actualAge","calculatePlan","custom","arguments","length","undefined","actualDesiredIncome","actualExtraExpense","actualCurrentInvestment","yearsToRetirement","monthsToRetirement","futureSalary","Math","pow","r","monthlyInvestment","accumulated","requiredCapital","calculateAccumulated","investment","i","adjustedExpense","low","high","iterationCount","maxIterations","data","push","year","capital","newPlan","projection","prevPlans","updatedPlans","React","createElement","style","maxWidth","margin","padding","background","borderRadius","boxShadow","fontSize","fontWeight","marginBottom","color","display","type","value","onChange","e","parseInt","target","min","max","width","border","onClick","marginTop","cursor","plan","lineHeight","marginLeft","generatePlanDescription","ResponsiveContainer","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Line","stroke","strokeWidth","justifyContent","prevPlan","index","nextPlan","textAlign","href","encodeURIComponent","textDecoration","App","className","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"sTAwSeA,MArSkBA,KAC/B,MAAOC,EAAKC,GAAUC,mBAAS,KACxBC,EAAeC,GAAoBF,mBAAS,KAC5CG,EAAeC,GAAoBJ,mBAAS,MAC5CK,EAAcC,GAAmBN,mBAAS,IAC1CO,EAAmBC,GAAwBR,mBAAS,IAEpDS,EAAqBC,GAA0BV,mBAASC,IACxDU,EAAqBC,GAA0BZ,mBAASG,IACxDU,EAAoBC,GAAyBd,mBAASK,IACtDU,EAAyBC,GAA8BhB,mBAASO,IAEhEU,EAAOC,GAAYlB,mBAAS,KAC5BmB,EAAkBC,GAAuBpB,mBAAS,IAClDqB,EAAmBC,GAAwBtB,oBAAS,IACpDuB,EAAOC,GAAYxB,mBAAS,IAM7ByB,EAAgBC,IACpB,MAAMC,EAAeC,WAAWF,GAChC,OAAIG,MAAMF,GACD,OAEFA,EAAaG,QAAQ,GAAGC,QAAQ,wBAAyB,MAwC5DC,EAAiBA,CAACC,EAAqBC,IACvCD,GAAuBC,GACzBV,EAAS,yDACF,IAETA,EAAS,KACF,GAGHW,EAAgB,WAAqB,IAApBC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC3B,MAAMJ,EAAsBG,EAAS3B,EAAsBR,EACrDiC,EAAYpC,EAElB,IAAKkC,EAAeC,EAAqBC,GACvC,OAGF,MAAMM,EAAsBJ,EAASzB,EAAsBR,EACrDsC,EAAqBL,EAASvB,EAAqBR,EACnDqC,EAA0BN,EAASrB,EAA0BR,EAE7DoC,EAAoBV,EAAsBC,EAC1CU,EAAyC,GAApBD,EACrBE,EAAeL,EAAsBM,KAAKC,IAAI,KAAmBJ,GAEjEK,EAzEW,GAyEM,GAEvB,IAAIC,EAAoB,EACpBC,EAAcR,EACdS,EAAkC,GAAfN,EA7EN,GA+EjB,MAAMO,EAAwBC,IAC5BH,EAAcR,EACd,IAAK,IAAIY,EAAI,EAAGA,GAAKV,EAAoBU,IAEvC,GADAJ,EAAcA,GAAe,EAAIF,GAAKK,EAClCZ,EAAqB,GAAKa,EAAI,KAAO,EAAG,CAC1C,MAAMC,EAAkBd,EAAqBK,KAAKC,IAAI,KAAmBO,EAAI,IAC7EJ,GAAeK,EAGnB,OAAOL,GAGT,IAAIM,EAAM,EACNC,EAAsB,IAAfZ,EACPa,EAAiB,EACrB,MAAMC,EAAgB,IAEtB,KAAOF,EAAOD,EAAM,KAAQE,EAAiBC,GAC3CV,GAAqBQ,EAAOD,GAAO,EACnCN,EAAcE,EAAqBH,GAE/BC,EAAcC,EAChBM,EAAOR,EAEPO,EAAMP,EAERS,IAGF,GAAIA,GAAkBC,EAEpB,YADAnC,EAAS,0FAIX,IAAIoC,EAAO,GACXV,EAAcR,EACd,IAAK,IAAIY,EAAI,EAAGA,GAAKV,EAAoBU,IAAK,CAG5C,GADAJ,GADuBA,EAAcF,EACLC,EAC5BR,EAAqB,GAAKa,EAAI,KAAO,EAAG,CAC1C,MAAMC,EAAkBd,EAAqBK,KAAKC,IAAI,KAAmBO,EAAI,IAC7EJ,GAAeK,EAEbD,EAAI,KAAO,GAAKA,IAAMV,GACxBgB,EAAKC,KAAK,CAAEC,KAAM5B,EAAYoB,EAAI,GAAIS,QAASnC,WAAWsB,EAAYpB,QAAQ,MAIlF,MAAMkC,EAAU,CACdlE,IAAKoC,EACLjC,cAAegC,EACf9B,cAAeqC,EACfK,aAAcA,EAAaf,QAAQ,GACnCqB,gBAAiBA,EAAgBrB,QAAQ,GACzCmB,kBAAmBA,EAAkBnB,QAAQ,GAC7CzB,aAAcoC,EACdlC,kBAAmBmC,EACnBuB,WAAYL,GAGd1C,EAAUgD,IACR,MAAMC,EAAe,IAAID,EAAWF,GAEpC,OADA5C,EAAoB+C,EAAa7B,OAAS,GACnC6B,IAET7C,GAAqB,IAMvB,OACE8C,IAAAC,cAAA,OAAKC,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,SAC1DL,IAAAC,cAAA,OAAKC,MAAO,CAAEI,WAAY,QAASC,aAAc,MAAOF,QAAS,OAAQG,UAAW,iCAClFR,IAAAC,cAAA,MAAIC,MAAO,CAAEO,SAAU,OAAQC,WAAY,OAAQC,aAAc,SAAU,iCAC1ExD,GAAS6C,IAAAC,cAAA,KAAGC,MAAO,CAAEU,MAAO,QAAUzD,GACvC6C,IAAAC,cAAA,OAAKC,MAAO,CAAES,aAAc,SAC1BX,IAAAC,cAAA,KAAGC,MAAO,CAAEO,SAAU,OAAQG,MAAO,SAAU,gEACgBZ,IAAAC,cAAA,cAAQ,eAAoB,8FAI7FD,IAAAC,cAAA,SAAOC,MAAO,CAAEW,QAAS,QAASJ,SAAU,OAAQE,aAAc,QAAS,WAC3EX,IAAAC,cAAA,SACEa,KAAK,SACLC,MAAOrF,EACPsF,SAAWC,GAAMtF,EAAOuF,SAASD,EAAEE,OAAOJ,QAC1CK,IAAK,GACLC,IAAK,GACLnB,MAAO,CAAEoB,MAAO,OAAQjB,QAAS,MAAOkB,OAAQ,iBAAkBhB,aAAc,SAElFP,IAAAC,cAAA,UACEuB,QAASA,IAAMzD,GAAc,GAC7BmC,MAAO,CAAEoB,MAAO,OAAQG,UAAW,OAAQnB,WAAY,UAAWM,MAAO,QAASP,QAAS,MAAOE,aAAc,MAAOgB,OAAQ,OAAQG,OAAQ,YAChJ,6BAKF7E,EAAMqB,OAAS,GACd8B,IAAAC,cAAA,OAAKC,MAAO,CAAEuB,UAAW,SACvBzB,IAAAC,cAAA,MAAIC,MAAO,CAAEO,SAAU,OAAQC,WAAY,QAAS,qBAxK3BiB,KAC/B,MAAM,cACJ9F,EAAa,cACbE,EAAa,aACbE,EAAY,kBACZE,EAAiB,aACjBsC,EAAY,gBACZM,EAAe,kBACfF,GACE8C,EAEJ,OACE3B,IAAAC,cAAA,OAAKC,MAAO,CAAEO,SAAU,OAAQG,MAAO,OAAQgB,WAAY,QACzD5B,IAAAC,cAAA,SAAG,8BAC0BD,IAAAC,cAAA,cAASpE,EAAc,YAAc,8CAA4C,IAC5GmE,IAAAC,cAAA,cAAQ,IAAE5C,EAAatB,GAAe,UAAe,gEAEvDiE,IAAAC,cAAA,MAAIC,MAAO,CAAEuB,UAAW,MAAOI,WAAY,SACzC7B,IAAAC,cAAA,UAAI,+BAC2B,IAC7BD,IAAAC,cAAA,cAAQ,IAAE5C,EAAaoB,GAAc,UAAe,iCAEtDuB,IAAAC,cAAA,UAAI,0CACsC,IACxCD,IAAAC,cAAA,cAAQ,IAAE5C,EAAa0B,GAAiB,UAAe,MAG3DiB,IAAAC,cAAA,KAAGC,MAAO,CAAEuB,UAAW,SAAU,wDACoB,IACnDzB,IAAAC,cAAA,cAAQ,IAAE5C,EAAawB,GAAmB,oBAAyB,wCAAsC,IACzGmB,IAAAC,cAAA,cAAQ,OAAY,OA2InB6B,CAAwBjF,EAAME,IAC/BiD,IAAAC,cAAC8B,IAAmB,CAACT,MAAM,OAAOU,OAAQ,KACxChC,IAAAC,cAACgC,IAAS,CAACzC,KAAM3C,EAAME,GAAkB8C,YACvCG,IAAAC,cAACiC,IAAa,CAACC,gBAAgB,QAC/BnC,IAAAC,cAACmC,IAAK,CAACC,QAAQ,SACfrC,IAAAC,cAACqC,IAAK,MACNtC,IAAAC,cAACsC,IAAO,MACRvC,IAAAC,cAACuC,IAAI,CAAC1B,KAAK,WAAWuB,QAAQ,UAAUI,OAAO,UAAUC,YAAa,MAG1E1C,IAAAC,cAAA,OAAKC,MAAO,CAAEW,QAAS,OAAQ8B,eAAgB,gBAAiBlB,UAAW,SACzEzB,IAAAC,cAAA,UACEuB,QA7CKoB,IAAM5F,EAAqB6F,IAAWA,EAAQ,EAAIhG,EAAMqB,QAAUrB,EAAMqB,QA8C7EgC,MAAO,CAAEI,WAAY,UAAWM,MAAO,QAASP,QAAS,MAAOE,aAAc,MAAOgB,OAAQ,OAAQG,OAAQ,YAC9G,YAGD1B,IAAAC,cAAA,UACEuB,QApDKsB,IAAM9F,EAAqB6F,IAAWA,EAAQ,GAAKhG,EAAMqB,QAqD9DgC,MAAO,CAAEI,WAAY,UAAWM,MAAO,QAASP,QAAS,MAAOE,aAAc,MAAOgB,OAAQ,OAAQG,OAAQ,YAC9G,eAONzE,GACC+C,IAAAC,cAAA,OAAKC,MAAO,CAAEuB,UAAW,SACvBzB,IAAAC,cAAA,MAAIC,MAAO,CAAEO,SAAU,OAAQC,WAAY,QAAS,kBACpDV,IAAAC,cAAA,KAAGC,MAAO,CAAEO,SAAU,OAAQG,MAAO,OAAQD,aAAc,SAAU,sHAGrEX,IAAAC,cAAA,aAAO,kBACPD,IAAAC,cAAA,SACEa,KAAK,SACLC,MAAO1E,EACP2E,SAAWC,GAAM3E,EAAuB4E,SAASD,EAAEE,OAAOJ,QAC1Db,MAAO,CAAEoB,MAAO,OAAQjB,QAAS,MAAOkB,OAAQ,iBAAkBhB,aAAc,MAAOI,aAAc,UAEvGX,IAAAC,cAAA,aAAO,2BACPD,IAAAC,cAAA,SACEa,KAAK,SACLC,MAAOxE,EACPyE,SAAWC,GAAMzE,EAAuB0E,SAASD,EAAEE,OAAOJ,QAC1Db,MAAO,CAAEoB,MAAO,OAAQjB,QAAS,MAAOkB,OAAQ,iBAAkBhB,aAAc,MAAOI,aAAc,UAEvGX,IAAAC,cAAA,aAAO,2BACPD,IAAAC,cAAA,SACEa,KAAK,SACLC,MAAOtE,EACPuE,SAAWC,GAAMvE,EAAsBwE,SAASD,EAAEE,OAAOJ,QACzDb,MAAO,CAAEoB,MAAO,OAAQjB,QAAS,MAAOkB,OAAQ,iBAAkBhB,aAAc,MAAOI,aAAc,UAEvGX,IAAAC,cAAA,aAAO,uBACPD,IAAAC,cAAA,SACEa,KAAK,SACLC,MAAOpE,EACPqE,SAAWC,GAAMrE,EAA2BsE,SAASD,EAAEE,OAAOJ,QAC9Db,MAAO,CAAEoB,MAAO,OAAQjB,QAAS,MAAOkB,OAAQ,iBAAkBhB,aAAc,MAAOI,aAAc,UAEvGX,IAAAC,cAAA,UACEuB,QAASA,IAAMzD,GAAc,GAC7BmC,MAAO,CAAEoB,MAAO,OAAQG,UAAW,OAAQnB,WAAY,UAAWM,MAAO,QAASP,QAAS,MAAOE,aAAc,MAAOgB,OAAQ,OAAQG,OAAQ,YAChJ,qBAML1B,IAAAC,cAAA,OAAKC,MAAO,CAAEuB,UAAW,OAAQsB,UAAW,WAC1C/C,IAAAC,cAAA,KAAGC,MAAO,CAAEO,SAAU,OAAQG,MAAO,OAAQgB,WAAY,MAAOjB,aAAc,SAAU,yGACQ,IAC9FX,IAAAC,cAAA,cAAQ,gBAAqB,wIAE/BD,IAAAC,cAAA,KACE+C,KAAM,mCAAmCC,mBACvCpG,EAAMqB,OAAS,EAEX,oIAAqBrB,EAAME,GAAkBlB,sDACdwB,EAAaR,EAAME,GAAkBhB,4DACjCsB,EAAaR,EAAME,GAAkB8B,mDAC/CxB,EAAaR,EAAME,GAAkBgC,2BAC9D,qEAENmB,MAAO,CAAEI,WAAY,UAAWM,MAAO,QAASP,QAAS,MAAOE,aAAc,MAAO2C,eAAgB,OAAQrC,QAAS,eAAgBY,UAAW,SAClJ,kCCrRM0B,MARf,WACE,OACEnD,IAAAC,cAAA,OAAKmD,UAAU,OACbpD,IAAAC,cAACxE,EAAwB,QCMhB4H,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnE,IAAAC,cAACD,IAAMoE,WAAU,KACfpE,IAAAC,cAACkD,EAAG,QAORE,M","file":"static/js/main.32f0fd8f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\r\n\r\nconst RetirementPlanCalculator = () => {\r\n  const [age, setAge] = useState(43);\r\n  const [retirementAge, setRetirementAge] = useState(65);\r\n  const [desiredIncome, setDesiredIncome] = useState(9000);\r\n  const [extraExpense, setExtraExpense] = useState(0);\r\n  const [currentInvestment, setCurrentInvestment] = useState(0);\r\n\r\n  const [customRetirementAge, setCustomRetirementAge] = useState(retirementAge);\r\n  const [customDesiredIncome, setCustomDesiredIncome] = useState(desiredIncome);\r\n  const [customExtraExpense, setCustomExtraExpense] = useState(extraExpense);\r\n  const [customCurrentInvestment, setCustomCurrentInvestment] = useState(currentInvestment);\r\n\r\n  const [plans, setPlans] = useState([]);\r\n  const [currentPlanIndex, setCurrentPlanIndex] = useState(0);\r\n  const [showCustomOptions, setShowCustomOptions] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const inflationRate = 0.04;\r\n  const returnRate = 0.20;\r\n\r\n  // Función para formatear cantidades con comas\r\n  const formatNumber = (number) => {\r\n    const parsedNumber = parseFloat(number);\r\n    if (isNaN(parsedNumber)) {\r\n      return \"0.00\";\r\n    }\r\n    return parsedNumber.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  };\r\n\r\n  // Función para generar el párrafo descriptivo del plan\r\n  const generatePlanDescription = (plan) => {\r\n    const {\r\n      retirementAge,\r\n      desiredIncome,\r\n      extraExpense,\r\n      currentInvestment,\r\n      futureSalary,\r\n      requiredCapital,\r\n      monthlyInvestment,\r\n    } = plan;\r\n\r\n    return (\r\n      <div style={{ fontSize: \"16px\", color: \"#333\", lineHeight: \"1.6\" }}>\r\n        <p>\r\n          Para poder retirarte a los <strong>{retirementAge} años</strong> con un ingreso mensual que te alcance para{\" \"}\r\n          <strong>${formatNumber(desiredIncome)} pesos</strong> de productos a precio de hoy, necesitarás en ese futuro:\r\n        </p>\r\n        <ul style={{ marginTop: \"8px\", marginLeft: \"20px\" }}>\r\n          <li>\r\n            Un ingreso mensual futuro de{\" \"}\r\n            <strong>${formatNumber(futureSalary)} pesos</strong> (ajustado por inflación).\r\n          </li>\r\n          <li>\r\n            Un capital requerido de aproximadamente{\" \"}\r\n            <strong>${formatNumber(requiredCapital)} pesos</strong>.\r\n          </li>\r\n        </ul>\r\n        <p style={{ marginTop: \"16px\" }}>\r\n          Y desde hoy, para poder lograrlo, deberás invertir{\" \"}\r\n          <strong>${formatNumber(monthlyInvestment)} pesos mensuales</strong> con un rendimiento anual de al menos{\" \"}\r\n          <strong>20%</strong>.\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const validateInputs = (actualRetirementAge, actualAge) => {\r\n    if (actualRetirementAge <= actualAge) {\r\n      setError(\"La edad de retiro debe ser mayor que la edad actual.\");\r\n      return false;\r\n    }\r\n    setError(\"\");\r\n    return true;\r\n  };\r\n\r\n  const calculatePlan = (custom = false) => {\r\n    const actualRetirementAge = custom ? customRetirementAge : retirementAge;\r\n    const actualAge = age;\r\n\r\n    if (!validateInputs(actualRetirementAge, actualAge)) {\r\n      return;\r\n    }\r\n\r\n    const actualDesiredIncome = custom ? customDesiredIncome : desiredIncome;\r\n    const actualExtraExpense = custom ? customExtraExpense : extraExpense;\r\n    const actualCurrentInvestment = custom ? customCurrentInvestment : currentInvestment;\r\n\r\n    const yearsToRetirement = actualRetirementAge - actualAge;\r\n    const monthsToRetirement = yearsToRetirement * 12;\r\n    const futureSalary = actualDesiredIncome * Math.pow(1 + inflationRate, yearsToRetirement);\r\n\r\n    const r = returnRate / 12;\r\n\r\n    let monthlyInvestment = 0;\r\n    let accumulated = actualCurrentInvestment;\r\n    let requiredCapital = (futureSalary * 12) / returnRate;\r\n\r\n    const calculateAccumulated = (investment) => {\r\n      accumulated = actualCurrentInvestment;\r\n      for (let i = 1; i <= monthsToRetirement; i++) {\r\n        accumulated = accumulated * (1 + r) + investment;\r\n        if (actualExtraExpense > 0 && i % 12 === 0) {\r\n          const adjustedExpense = actualExtraExpense * Math.pow(1 + inflationRate, i / 12);\r\n          accumulated -= adjustedExpense;\r\n        }\r\n      }\r\n      return accumulated;\r\n    };\r\n\r\n    let low = 0;\r\n    let high = futureSalary * 100;\r\n    let iterationCount = 0;\r\n    const maxIterations = 1000;\r\n\r\n    while (high - low > 0.01 && iterationCount < maxIterations) {\r\n      monthlyInvestment = (high + low) / 2;\r\n      accumulated = calculateAccumulated(monthlyInvestment);\r\n\r\n      if (accumulated > requiredCapital) {\r\n        high = monthlyInvestment;\r\n      } else {\r\n        low = monthlyInvestment;\r\n      }\r\n      iterationCount++;\r\n    }\r\n\r\n    if (iterationCount >= maxIterations) {\r\n      setError(\"No se pudo calcular la inversión mensual. Por favor, revisa los valores ingresados.\");\r\n      return;\r\n    }\r\n\r\n    let data = [];\r\n    accumulated = actualCurrentInvestment;\r\n    for (let i = 1; i <= monthsToRetirement; i++) {\r\n      const interesMensual = accumulated * r;\r\n      accumulated += interesMensual + monthlyInvestment;\r\n      if (actualExtraExpense > 0 && i % 12 === 0) {\r\n        const adjustedExpense = actualExtraExpense * Math.pow(1 + inflationRate, i / 12);\r\n        accumulated -= adjustedExpense;\r\n      }\r\n      if (i % 12 === 0 || i === monthsToRetirement) {\r\n        data.push({ year: actualAge + i / 12, capital: parseFloat(accumulated.toFixed(2)) });\r\n      }\r\n    }\r\n\r\n    const newPlan = {\r\n      age: actualAge,\r\n      retirementAge: actualRetirementAge,\r\n      desiredIncome: actualDesiredIncome,\r\n      futureSalary: futureSalary.toFixed(2),\r\n      requiredCapital: requiredCapital.toFixed(2),\r\n      monthlyInvestment: monthlyInvestment.toFixed(2),\r\n      extraExpense: actualExtraExpense,\r\n      currentInvestment: actualCurrentInvestment,\r\n      projection: data,\r\n    };\r\n\r\n    setPlans((prevPlans) => {\r\n      const updatedPlans = [...prevPlans, newPlan];\r\n      setCurrentPlanIndex(updatedPlans.length - 1);\r\n      return updatedPlans;\r\n    });\r\n    setShowCustomOptions(true);\r\n  };\r\n\r\n  const nextPlan = () => setCurrentPlanIndex((index) => (index + 1) % plans.length);\r\n  const prevPlan = () => setCurrentPlanIndex((index) => (index - 1 + plans.length) % plans.length);\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"800px\", margin: \"0 auto\", padding: \"20px\" }}>\r\n      <div style={{ background: \"white\", borderRadius: \"8px\", padding: \"16px\", boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\" }}>\r\n        <h2 style={{ fontSize: \"24px\", fontWeight: \"bold\", marginBottom: \"16px\" }}>Calculadora de Plan de Retiro</h2>\r\n        {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n        <div style={{ marginBottom: \"16px\" }}>\r\n          <p style={{ fontSize: \"16px\", color: \"#333\" }}>\r\n            Para generar tu plan de retiro, primero necesitamos saber tu <strong>edad actual</strong>.\r\n            Esto nos ayudará a calcular cuánto tiempo tienes para ahorrar antes de retirarte.\r\n          </p>\r\n        </div>\r\n        <label style={{ display: \"block\", fontSize: \"14px\", marginBottom: \"8px\" }}>Tu edad</label>\r\n        <input\r\n          type=\"number\"\r\n          value={age}\r\n          onChange={(e) => setAge(parseInt(e.target.value))}\r\n          min={18}\r\n          max={64}\r\n          style={{ width: \"100%\", padding: \"8px\", border: \"1px solid #ccc\", borderRadius: \"4px\" }}\r\n        />\r\n        <button\r\n          onClick={() => calculatePlan(false)}\r\n          style={{ width: \"100%\", marginTop: \"16px\", background: \"#3b82f6\", color: \"white\", padding: \"8px\", borderRadius: \"4px\", border: \"none\", cursor: \"pointer\" }}\r\n        >\r\n          Generar Plan Estándar\r\n        </button>\r\n      </div>\r\n\r\n      {plans.length > 0 && (\r\n        <div style={{ marginTop: \"24px\" }}>\r\n          <h3 style={{ fontSize: \"20px\", fontWeight: \"600\" }}>Detalles del Plan</h3>\r\n          {generatePlanDescription(plans[currentPlanIndex])}\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart data={plans[currentPlanIndex].projection}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"year\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Line type=\"monotone\" dataKey=\"capital\" stroke=\"#8884d8\" strokeWidth={2} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n          <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: \"16px\" }}>\r\n            <button\r\n              onClick={prevPlan}\r\n              style={{ background: \"#6b7280\", color: \"white\", padding: \"8px\", borderRadius: \"4px\", border: \"none\", cursor: \"pointer\" }}\r\n            >\r\n              Anterior\r\n            </button>\r\n            <button\r\n              onClick={nextPlan}\r\n              style={{ background: \"#6b7280\", color: \"white\", padding: \"8px\", borderRadius: \"4px\", border: \"none\", cursor: \"pointer\" }}\r\n            >\r\n              Siguiente\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showCustomOptions && (\r\n        <div style={{ marginTop: \"24px\" }}>\r\n          <h3 style={{ fontSize: \"20px\", fontWeight: \"600\" }}>Ajusta tu plan</h3>\r\n          <p style={{ fontSize: \"16px\", color: \"#333\", marginBottom: \"16px\" }}>\r\n            ¿Quieres explorar diferentes escenarios? Ajusta los siguientes datos para ver cómo cambia tu plan de retiro:\r\n          </p>\r\n          <label>Edad de retiro</label>\r\n          <input\r\n            type=\"number\"\r\n            value={customRetirementAge}\r\n            onChange={(e) => setCustomRetirementAge(parseInt(e.target.value))}\r\n            style={{ width: \"100%\", padding: \"8px\", border: \"1px solid #ccc\", borderRadius: \"4px\", marginBottom: \"16px\" }}\r\n          />\r\n          <label>Ingreso mensual deseado</label>\r\n          <input\r\n            type=\"number\"\r\n            value={customDesiredIncome}\r\n            onChange={(e) => setCustomDesiredIncome(parseInt(e.target.value))}\r\n            style={{ width: \"100%\", padding: \"8px\", border: \"1px solid #ccc\", borderRadius: \"4px\", marginBottom: \"16px\" }}\r\n          />\r\n          <label>Gasto extra cada año</label>\r\n          <input\r\n            type=\"number\"\r\n            value={customExtraExpense}\r\n            onChange={(e) => setCustomExtraExpense(parseInt(e.target.value))}\r\n            style={{ width: \"100%\", padding: \"8px\", border: \"1px solid #ccc\", borderRadius: \"4px\", marginBottom: \"16px\" }}\r\n          />\r\n          <label>Inversión actual</label>\r\n          <input\r\n            type=\"number\"\r\n            value={customCurrentInvestment}\r\n            onChange={(e) => setCustomCurrentInvestment(parseInt(e.target.value))}\r\n            style={{ width: \"100%\", padding: \"8px\", border: \"1px solid #ccc\", borderRadius: \"4px\", marginBottom: \"16px\" }}\r\n          />\r\n          <button\r\n            onClick={() => calculatePlan(true)}\r\n            style={{ width: \"100%\", marginTop: \"16px\", background: \"#3b82f6\", color: \"white\", padding: \"8px\", borderRadius: \"4px\", border: \"none\", cursor: \"pointer\" }}\r\n          >\r\n            Crear Nuevo Plan\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <div style={{ marginTop: \"24px\", textAlign: \"center\" }}>\r\n        <p style={{ fontSize: \"16px\", color: \"#333\", lineHeight: \"1.6\", marginBottom: \"16px\" }}>\r\n          ¿Quisieras que te digamos cómo lograrlo? Muchas personas se están asociando en la cooperativa{\" \"}\r\n          <strong>\"Lo Nuestro\"</strong> para alcanzar sus metas de retiro. ¡Mándanos un mensaje y te decimos los siguientes pasos! Cabe mencionar que no cuesta nada.\r\n        </p>\r\n        <a\r\n          href={`https://wa.me/522481146831?text=${encodeURIComponent(\r\n            plans.length > 0\r\n              ? `Hola, quiero saber más sobre cómo lograr mi plan de retiro. Aquí están los detalles de mi plan:\\n\\n` +\r\n                `- Edad de retiro: ${plans[currentPlanIndex].retirementAge} años\\n` +\r\n                `- Ingreso mensual deseado: $${formatNumber(plans[currentPlanIndex].desiredIncome)} pesos\\n` +\r\n                `- Inversión mensual necesaria: $${formatNumber(plans[currentPlanIndex].monthlyInvestment)} pesos\\n` +\r\n                `- Capital requerido: $${formatNumber(plans[currentPlanIndex].requiredCapital)} pesos\\n`\r\n              : \"Hola, quiero saber más sobre cómo lograr mi plan de retiro.\"\r\n          )}`}\r\n          style={{ background: \"#25D366\", color: \"white\", padding: \"8px\", borderRadius: \"4px\", textDecoration: \"none\", display: \"inline-block\", marginTop: \"16px\" }}\r\n        >\r\n          Enviar mensaje por WhatsApp\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RetirementPlanCalculator;","import React from \"react\";\nimport RetirementPlanCalculator from \"./RetirementPlanCalculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RetirementPlanCalculator />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}